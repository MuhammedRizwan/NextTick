<%- include('../adminLayout/header') %>
    <section class="content-main">
        <div class="row">
            <div class="col-9">
                <div class="content-header">
                    <h2 class="content-title">Add New Product</h2>
                    <div>
                        <button class="btn btn-light rounded font-sm mr-5 text-body hover-up">Save to draft</button>
                        <button class="btn btn-md rounded font-sm hover-up">Publich</button>
                    </div>
                </div>
            </div>
            <div class="col-lg-6">
                <div class="card mb-4">
                    <div class="card-header">
                        <h4>Basic</h4>
                    </div>
                    <div class="card-body">
                        <form action="/admin/addproduct" method="post" enctype="multipart/form-data"
                            onsubmit="return validate()">
                            <div class="mb-4">
                                <label for="product_name" class="form-label">Product title</label>
                                <input type="text" placeholder="Type here" class="form-control" id="product_name"
                                    name="productName">
                                <a href="" id="productNameError"></a>
                            </div>
                            <div class="mb-4">
                                <label for="brand_name" class="form-label">Brand Name</label>
                                <input type="text" placeholder="Type here" class="form-control" id="brand_name"
                                    name="brandName">
                                <a href="" id="brandNameError"></a>
                            </div>
                            <div class="mb-4">
                                <label class="form-label">Full description</label>
                                <textarea placeholder="Type here" class="form-control" rows="4" id="discription"
                                    name="discription"></textarea>
                                <a href="" id="discriptionError"></a>
                            </div>
                            <div class="row">
                                <div class="col-lg-6">
                                    <div class="mb-4">
                                        <label class="form-label">Orginal price</label>
                                        <div class="row gx-2">
                                            <input placeholder=" &#8377;" type="number" class="form-control"
                                                id="orginal_price" name="orginalPrice" min="0">
                                            <a href="" id="orginalPriceError"></a>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-lg-6">
                                    <div class="mb-4">
                                        <label class="form-label">Sale price</label>
                                        <input placeholder=" &#8377;" type="number" class="form-control" id="sale_price"
                                            name="salePrice" min="0">
                                        <a href="" id="salePriceError"></a>
                                    </div>
                                </div>
                            </div>
                    </div>
                </div> <!-- card end// -->
            </div>
            <div class="col-lg-6">
                <div class="card mb-4">
                    <div class="card-header">
                        <h4>Media</h4>
                    </div>
                    <div class="card-body">
                        <input class="form-control" name="images" id="product_image" type="file" multiple
                            accept="image/png, image/jpeg" onchange="previewImages(event)" />
                        <span id="image-error" style="font-size: 14px; margin-top: -20px"></span>
                        <button class="btn btn-secondary mt-2" id="crop-button" style="display: none;"
                            onclick="cropImage()">Crop</button>
                    </div>
                    <div id="image-preview" class="mb-4"></div>
                </div>
            </div> <!-- card end// -->
            <div class="card mb-4">
                <div class="card-header">
                    <h4>Organization</h4>
                </div>
                <div class="card-body">
                    <div class="row gx-2">
                        <div class="col-sm-6 mb-3">
                            <label class="form-label">Category</label>
                            <select class="form-select" name="select">
                                <% for( let i=0; i < cat.length; i++ ) { %>
                                    <option>
                                        <%= cat[i].categoryName %>
                                    </option>
                                    <% } %>
                            </select>
                        </div>
                        <div class="col-lg-6">
                            <div class="mb-4">
                                <label class="form-label">Quantity</label>
                                <input type="number" class="form-control" name="stock" id="quantinty" min="0">
                                <a href="" id="quantityError"></a>
                            </div>
                        </div>
                    </div>
                    <button type="submit" class="btn btn-primary w-100">Add product</button>
                </div>
            </div> <!-- row.// -->
        </div>
        </form>
        </div> <!-- card end// -->
        </div>
        </div>
    </section>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.js"></script>
    <script>
        const croppers = [];
        const files = [];
        let currentIndex = 0;

        function previewImages(event) {
            const previewContainer = document.getElementById("image-preview");
            previewContainer.innerHTML = "";
            const files = event.target.files;

            for (let i = 0; i < files.length; i++) {
                const file = files[i];
                const reader = new FileReader();

                reader.onload = function (e) {
                    const img = document.createElement("img");
                    img.src = e.target.result;
                    img.classList.add("img-preview");

                    const deleteIcon = document.createElement("i");
                    deleteIcon.className = "fa-solid fa-trash text-danger";
                    deleteIcon.onclick = function () {
                        this.parentNode.remove();
                        updateSelectedFiles();
                    };

                    const replaceIcon = document.createElement("i");
                    replaceIcon.className = "fa-solid fa-repeat text-success ms-2";
                    replaceIcon.onclick = function () {
                        const index = Array.from(this.parentNode.parentNode.children).indexOf(this.parentNode);
                        const fileInput = document.createElement('input');
                        fileInput.type = 'file';
                        fileInput.accept = 'image/*';
                        fileInput.onchange = function (event) {
                            const file = event.target.files[0];
                            if (file) {
                                const reader = new FileReader();
                                reader.onload = function (e) {
                                    img.src = e.target.result;
                                    updateFileInput(file, index);
                                };
                                reader.readAsDataURL(file);
                            }
                        };
                        fileInput.click();
                    };

                    const cropIcon = document.createElement("i");
                    cropIcon.className = "fa-solid fa-crop text-info ms-2";
                    cropIcon.onclick = function () {
                        cropImage(img, i);
                    };

                    const div = document.createElement("div");
                    div.appendChild(img);
                    div.appendChild(deleteIcon);
                    div.appendChild(replaceIcon);
                    div.appendChild(cropIcon);
                    previewContainer.appendChild(div);
                };

                reader.readAsDataURL(file);
            }
        }

        function cropImage(image, index) {
            const cropper = new Cropper(image, {
                aspectRatio: 1,
                viewMode: 1,
                crop: function (event) {
                    const canvas = cropper.getCroppedCanvas();
                    canvas.toBlob(function (blob) {
                        const croppedFile = new File([blob], 'cropped_image.png', { type: 'image/png' });
                        updateFileInput(croppedFile, index);
                    });
                },
            });
            return cropper;
        }


        function updateSelectedFiles() {
            const filesInput = document.getElementById("product_image");
            const previewImages = document.querySelectorAll('.img-preview');
            const fileList = new DataTransfer();

            previewImages.forEach((img) => {
                const src = img.getAttribute('src');
                const file = dataURLtoFile(src, `image_${Date.now()}.png`);
                fileList.items.add(file);
            });

            filesInput.files = fileList.files;
        }

        function dataURLtoFile(dataurl, filename) {
            const arr = dataurl.split(',');
            const mime = arr[0].match(/:(.*?);/)[1];
            const bstr = atob(arr[1]);
            let n = bstr.length;
            const u8arr = new Uint8Array(n);
            while (n--) {
                u8arr[n] = bstr.charCodeAt(n);
            }
            return new File([u8arr], filename, { type: mime });
        }

        function updateFileInput(file, index) {
            const fileInput = document.getElementById('product_image');
            const fileList = new DataTransfer();

            const files = fileInput.files;
            for (let i = 0; i < files.length; i++) {
                if (i === index) {
                    // Replace the file at the specified index with the cropped image file
                    fileList.items.add(file);
                } else {
                    fileList.items.add(files[i]);
                }
            }

            fileInput.files = fileList.files;
        }
        function validate() {
            // Input fields
            const product_name = document.getElementById('product_name');
            const brand_name = document.getElementById('brand_name');
            const disciption = document.getElementById('discription');
            const orginal_price = document.getElementById('orginal_price');
            const sale_price = document.getElementById('sale_price');
            const quantity = document.getElementById('quantinty'); // Fixed typo in ID name
            const fileInput = document.querySelector('input[type="file"]');
            const files = fileInput.files;
            // Error fields
            const productNameError = document.getElementById('productNameError');
            const brandNameError = document.getElementById('brandNameError');
            const discriptionError = document.getElementById('discriptionError');
            const orginalPriceError = document.getElementById('orginalPriceError');
            const salePriceError = document.getElementById('salePriceError');
            const quantityError = document.getElementById('quantityError');
            const imageError = document.getElementById('imageError');

            const textAreaRegex = /(?:[^\d\W_]*[a-zA-Z]){6,}/;

            // Name field
            if (product_name.value.trim() === '') {
                productNameError.innerHTML = 'Field is required';
                setTimeout(() => {
                    productNameError.innerHTML = '';
                }, 5000);
                return false;
            }

            // Brand Name field
            if (brand_name.value.trim() === '') {
                brandNameError.innerHTML = 'Field is required';
                setTimeout(() => {
                    brandNameError.innerHTML = '';
                }, 5000);
                return false;
            }

            // Description field
            if (disciption.value.trim() === '') {
                discriptionError.innerHTML = 'Field is required';
                setTimeout(() => {
                    discriptionError.innerHTML = '';
                }, 5000);
                return false;
            }
            // Assuming textAreaRegex is intended for description validation
            if (!textAreaRegex.test(disciption.value)) {
                discriptionError.innerHTML = 'Minimum 10 letters required';
                setTimeout(() => {
                    discriptionError.innerHTML = '';
                }, 5000);
                return false;
            }

            // Original Price field
            if (orginal_price.value.trim() === '') {
                orginalPriceError.innerHTML = 'Field is required';
                setTimeout(() => {
                    orginalPriceError.innerHTML = '';
                }, 5000);
                return false;
            }

            // Sale Price field
            if (sale_price.value.trim() === '') {
                salePriceError.innerHTML = 'Field is required';
                setTimeout(() => {
                    salePriceError.innerHTML = '';
                }, 5000);
                return false;
            }
            // File input validation
            if (files.length === 0) {
                imageError.innerHTML = 'Field is required';
                setTimeout(() => {
                    imageError.innerHTML = '';
                }, 5000);
                return false;
            }
            // Quantity field
            if (quantity.value.trim() === '') {
                quantityError.innerHTML = 'Field is required';
                setTimeout(() => {
                    quantityError.innerHTML = '';
                }, 5000);
                return false;
            }

            // Add your quantity validation logic here using RegExp or comparisons

            return true;
        }
    </script>
    <script>
        const input = document.getElementById("addImageName");
        const imageContainer = document.getElementById("imageContainer");

        input.addEventListener("change", () => {
            // Clear previous images
            imageContainer.innerHTML = '';

            // Loop through selected files and display them
            for (let i = 0; i < input.files.length; i++) {
                const imageWrapper = document.createElement("div");
                const image = document.createElement("img");
                const deleteButton = document.createElement("button");

                image.src = URL.createObjectURL(input.files[i]);
                image.style.width = "100px"; // Set width as needed
                image.style.height = "100px"; // Set height as needed

                deleteButton.textContent = "Delete";
                deleteButton.style.background = "red"
                // Add a margin between the image and the delete button
                deleteButton.style.margin = "5px"
                deleteButton.addEventListener("click", () => {
                    // Remove the image and its wrapper when delete button is clicked
                    imageWrapper.remove();
                });

                imageWrapper.appendChild(image);
                imageWrapper.appendChild(deleteButton);

                imageContainer.appendChild(imageWrapper);
            }
        });
    </script>

    <!-- Rest of your HTML code -->


    <%- include('../adminLayout/footer') %>